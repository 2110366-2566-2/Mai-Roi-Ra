basePath: /api/v1
definitions:
  models.User:
    properties:
      address:
        type: string
      banner_image:
        type: string
      birth_date:
        type: string
      created_at:
        type: string
      district:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      payment_gateway_customer_id:
        type: string
      phone_number:
        description: Replace "phone_length_constraint" with actual SQL check expression
          if needed
        type: string
      province:
        type: string
      updated_at:
        type: string
      user_id:
        description: |-
          gorm.Model                         // This includes fields ID, CreatedAt, UpdatedAt, DeletedAt
          UserImage                *string   `gorm:"column:user_image" json:"user_image"`
        type: string
      user_image:
        type: string
      username:
        type: string
    type: object
  structure.CreateEventRequest:
    properties:
      activities:
        type: string
      city:
        type: string
      description:
        type: string
      district:
        type: string
      end_date:
        type: string
      event_image:
        type: string
      event_name:
        type: string
      location_name:
        type: string
      organizer_id:
        type: string
      participant_fee:
        type: number
      start_date:
        type: string
      status:
        type: string
    required:
    - activities
    - city
    - description
    - district
    - end_date
    - event_image
    - event_name
    - location_name
    - organizer_id
    - participant_fee
    - start_date
    - status
    type: object
  structure.CreateEventResponse:
    properties:
      event_id:
        type: string
    type: object
  structure.CreateUserRequest:
    properties:
      address:
        type: string
      district:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone_number:
        type: string
      province:
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - address
    - district
    - first_name
    - last_name
    - password
    - province
    - role
    - username
    type: object
  structure.CreateUserResponse:
    properties:
      organizer_id:
        type: string
      user_id:
        type: string
    required:
    - user_id
    type: object
  structure.GetEventDataByIdResponse:
    properties:
      activities:
        type: string
      admin_id:
        type: string
      city:
        type: string
      country:
        type: string
      deadline:
        type: string
      description:
        type: string
      district:
        type: string
      end_date:
        type: string
      event_id:
        type: string
      event_image:
        type: string
      event_name:
        type: string
      location_id:
        type: string
      location_name:
        type: string
      organizer_id:
        type: string
      participant_fee:
        type: number
      start_date:
        type: string
      status:
        type: string
    type: object
  structure.GetEventList:
    properties:
      city:
        type: string
      description:
        type: string
      district:
        type: string
      end_date:
        type: string
      event_id:
        type: string
      event_image:
        type: string
      event_name:
        type: string
      start_date:
        type: string
      status:
        type: string
    type: object
  structure.GetEventListsResponse:
    properties:
      event_lists:
        items:
          $ref: '#/definitions/structure.GetEventList'
        type: array
    type: object
  structure.GetLocationByIdResponse:
    properties:
      city:
        type: string
      country:
        type: string
      district:
        type: string
      location_name:
        type: string
    type: object
  structure.LoginUserRequest:
    properties:
      email:
        type: string
      password:
        type: string
      phone_number:
        type: string
    type: object
  structure.TestResponse:
    properties:
      message:
        type: string
    type: object
  structure.UpdateEventRequest:
    properties:
      activities:
        type: string
      city:
        type: string
      description:
        type: string
      district:
        type: string
      end_date:
        type: string
      event_id:
        type: string
      event_image:
        type: string
      event_name:
        type: string
      location_name:
        type: string
      participant_fee:
        type: number
      start_date:
        type: string
      status:
        type: string
    required:
    - activities
    - city
    - description
    - district
    - end_date
    - event_name
    - location_name
    - participant_fee
    - start_date
    - status
    type: object
  structure.UpdateEventResponse:
    properties:
      event_id:
        type: string
    type: object
  structure.UpdateUserInformationRequest:
    properties:
      address:
        type: string
      birth_date:
        type: string
      district:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      province:
        type: string
      user_id:
        type: string
      user_image:
        type: string
    required:
    - address
    - birth_date
    - district
    - first_name
    - last_name
    - province
    - user_id
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server Mai-Roi-Ra api gateway.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Mai-Roi-Ra Swagger API
  version: "1.0"
paths:
  /events:
    get:
      consumes:
      - application/json
      description: Get list of events
      parameters:
      - description: For My events
        in: query
        name: organizer_id
        type: string
      - description: Status query. i.e. Approved
        in: query
        name: filter
        type: string
      - description: Sort order. i.e. start_date ASC
        in: query
        name: sort
        type: string
      - description: offset i.e. 0
        in: query
        name: offset
        type: integer
      - description: Items per page i.e. 10
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structure.GetEventListsResponse'
        "400":
          description: Bad Request
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: GetEventLists
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Create a new event with the provided details.
      parameters:
      - description: Create Event Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/structure.CreateEventRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structure.CreateEventResponse'
        "400":
          description: Bad Request
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: Create new event
      tags:
      - events
  /events/{event_id}:
    delete:
      consumes:
      - application/json
      description: Delete an event with the specified ID.
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "400":
          description: Bad Request
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: Delete event by ID
      tags:
      - events
    get:
      consumes:
      - application/json
      description: Get a test message
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structure.GetEventDataByIdResponse'
        "400":
          description: Bad Request
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: GetEventDataById
      tags:
      - events
    put:
      consumes:
      - application/json
      description: Update an existing event with the provided details.
      parameters:
      - description: Event ID
        in: path
        name: event_id
        required: true
        type: string
      - description: Update Event Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/structure.UpdateEventRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structure.UpdateEventResponse'
        "400":
          description: Bad Request
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: Update existing event
      tags:
      - events
  /locations/{location_id}:
    get:
      consumes:
      - application/json
      description: Get location by id
      parameters:
      - description: Location ID
        in: path
        name: location_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structure.GetLocationByIdResponse'
        "400":
          description: Bad Request
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: GetLocationById
      tags:
      - locations
  /login:
    post:
      consumes:
      - application/json
      description: Logs in a user by their email, phone number, and password.
      parameters:
      - description: Log in a user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/structure.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Returns the login token.
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if login fails.
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Log in a user
      tags:
      - user
  /logout:
    post:
      consumes:
      - application/json
      description: Logs out a user by invalidating the session token associated with
        the uid.
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Confirms the user has been logged out.
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Returns an error if logout fails.
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Log out a user
      tags:
      - user
  /test:
    get:
      consumes:
      - application/json
      description: Get a test message
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structure.TestResponse'
      summary: GetTest
      tags:
      - Test
  /users:
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details.
      parameters:
      - description: Create User Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/structure.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/structure.CreateUserResponse'
        "400":
          description: Bad Request
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: Create new user
      tags:
      - users
  /users/{user_id}:
    get:
      consumes:
      - application/json
      description: Get User from given field (user_id)
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: GetUserByUserId
      tags:
      - user
    put:
      consumes:
      - application/json
      description: Update User information with the desired input
      parameters:
      - description: Create Event Request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/structure.UpdateUserInformationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            type: object
        "500":
          description: Internal Server Error
          schema:
            type: object
      summary: UpdateUserInformation
      tags:
      - user
  /validate-token:
    get:
      consumes:
      - application/json
      description: Validates a user's authentication token and returns the associated
        user details if valid.
      parameters:
      - description: Authentication Token
        in: header
        name: token
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Returns user details on successful token validation.
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Returns an error if the token is invalid or expired.
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Validate user token
      tags:
      - user
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
