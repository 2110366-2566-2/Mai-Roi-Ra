{
    "swagger": "2.0",
    "info": {
        "description": "This is a sample server Mai-Roi-Ra api gateway.",
        "title": "Mai-Roi-Ra Swagger API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api/v1",
    "paths": {
        "/announcements": {
            "post": {
                "description": "Sends an announcement email to the specified recipients.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "announcements"
                ],
                "summary": "Send Announcement",
                "parameters": [
                    {
                        "description": "Send Announcement Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structure.SendAnnouncementRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Announcement successfully sent",
                        "schema": {
                            "$ref": "#/definitions/structure.SendAnnounceResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - error in sending the announcement",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/announcements/cancelled_email": {
            "post": {
                "description": "Sends an Cancelled email to the specified recipients.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "announcements"
                ],
                "summary": "Send CancelledEmail",
                "parameters": [
                    {
                        "description": "Send CancelledEmail Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structure.SendCancelledEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CancelledEmail successfully sent",
                        "schema": {
                            "$ref": "#/definitions/structure.SendCancelledEmailRequest"
                        }
                    },
                    "400": {
                        "description": "Bad request - error in sending the CancelledEmail",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/announcements/registered_email": {
            "post": {
                "description": "Sends an Registered email to the specified recipients.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "announcements"
                ],
                "summary": "Send RegisteredEmail",
                "parameters": [
                    {
                        "description": "Send RegisteredEmail Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structure.SendRegisteredEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "RegisteredEmail successfully sent",
                        "schema": {
                            "$ref": "#/definitions/structure.SendRegisteredEmailResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - error in sending the RegisteredEmail",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/announcements/reminder_email": {
            "post": {
                "description": "Sends an Reminder email to the specified recipients.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "announcements"
                ],
                "summary": "Send ReminderEmail",
                "parameters": [
                    {
                        "description": "Send ReminderEmail Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structure.SendReminderEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ReminderEmail successfully sent",
                        "schema": {
                            "$ref": "#/definitions/structure.SendReminderEmailResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - error in sending the ReminderEmail",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/auth/users": {
            "get": {
                "description": "Get list of users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "GetAllUsers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter query",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.GetAllUsersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/auth/{provider}/login": {
            "get": {
                "description": "Get list of all participated events of the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "LoginGoogle",
                "parameters": [
                    {
                        "type": "string",
                        "description": "provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "description": "Get list of events",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "GetEventLists",
                "parameters": [
                    {
                        "type": "string",
                        "description": "For My events",
                        "name": "organizer_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Status query. i.e. Approved",
                        "name": "filter",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order. i.e. start_date ASC",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search i.e. Hello",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "offset i.e. 0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page i.e. 10",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.GetEventListsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new event with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Create new event",
                "parameters": [
                    {
                        "description": "Create Event Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structure.CreateEventRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.CreateEventResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/events/participant": {
            "get": {
                "description": "Get list of all participant in the events",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "GetParticipantLists",
                "parameters": [
                    {
                        "type": "string",
                        "description": "event_id",
                        "name": "event_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "offset i.e. 0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page i.e. 10",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.GetParticipantListsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/events/{event_id}": {
            "get": {
                "description": "Get a test message",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "GetEventDataById",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.GetEventDataByIdResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing event with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Update existing event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Event Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structure.UpdateEventRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.UpdateEventResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete an event with the specified ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "Delete event by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/events/{event_id}/verify": {
            "put": {
                "description": "Verify an Event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "events"
                ],
                "summary": "VerifyEvent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Status",
                        "name": "status",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.VerifyEventResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/locations/{location_id}": {
            "get": {
                "description": "Get location by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "locations"
                ],
                "summary": "GetLocationById",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Location ID",
                        "name": "location_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.GetLocationByIdResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Logs in a user by their email, phone number, and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Log in a user",
                "parameters": [
                    {
                        "description": "Log in a user",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structure.LoginUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.LoginUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/loginemail": {
            "post": {
                "description": "Logs in a user by their email and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Log in a user with email",
                "parameters": [
                    {
                        "description": "Log in a user with Email",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structure.LoginUserEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/loginphone": {
            "post": {
                "description": "Logs in a user by their phone number and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Log in a user with phone",
                "parameters": [
                    {
                        "description": "Log in a user with Phone",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structure.LoginUserPhoneRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "description": "Logs out a user by invalidating the session token associated with the uid.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Log out a user",
                "responses": {
                    "200": {
                        "description": "Confirms the user has been logged out.",
                        "schema": {
                            "$ref": "#/definitions/structure.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Returns an error if logout fails.",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/participate/is_registered": {
            "get": {
                "description": "Determine that whether the user has registered in this events",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "participates"
                ],
                "summary": "IsRegistered",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user_id",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "event_id",
                        "name": "event_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.IsRegisteredResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/problems": {
            "get": {
                "description": "Get a list of problems filtered by status (Replied or Pending).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "problems"
                ],
                "summary": "Get list of problems",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user_id",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Problem Status (Replied or Pending)",
                        "name": "status",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.GetProblemListsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new problem with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "problems"
                ],
                "summary": "Create a new problem",
                "parameters": [
                    {
                        "description": "Create Problem Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structure.CreateProblemRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.CreateProblemResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/problems/{problem_id}": {
            "get": {
                "description": "Get the details of a specific problem by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "problems"
                ],
                "summary": "Get problem detail",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Problem ID",
                        "name": "problem_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Problem"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing problem with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "problems"
                ],
                "summary": "Update existing problem",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Problem ID",
                        "name": "problem_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update Problem Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structure.UpdateProblemRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.ProblemResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a problem with the specified ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "problems"
                ],
                "summary": "Delete problem by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Problem ID",
                        "name": "problem_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.ProblemResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/test": {
            "get": {
                "description": "Get a test message",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Test"
                ],
                "summary": "GetTest",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.TestResponse"
                        }
                    }
                }
            }
        },
        "/test/qr": {
            "get": {
                "description": "Get a test message",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Test"
                ],
                "summary": "TestCreatePromptPayPayment",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/transactions/payment-intent/{id}": {
            "get": {
                "description": "Retrieve details of a payment intent by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "Retrieve Payment Intent by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Payment Intent ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/structure.GetPaymentIntentByIdResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/transactions/qr": {
            "post": {
                "description": "CreateQRPromptPay for user to pay",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "transactions"
                ],
                "summary": "CreateQRPromptPay",
                "parameters": [
                    {
                        "description": "Get PromptPay",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structure.CreateQRPromptPayRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.TransactionResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/users": {
            "post": {
                "description": "Create a new user with the provided details.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create new user",
                "parameters": [
                    {
                        "description": "Create User Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structure.CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.CreateUserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/users/auth/{provider}/callback": {
            "get": {
                "description": "Get info of user from Gmail",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "CallbackGoogle",
                "parameters": [
                    {
                        "type": "string",
                        "description": "provider",
                        "name": "provider",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/users/events": {
            "get": {
                "description": "Get list of all participated events of the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "GetParticipatedEventLists",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user_id",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "offset i.e. 0",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Items per page i.e. 10",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.GetParticipatedEventListsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/users/notification": {
            "put": {
                "description": "Toggle the enabling notification for user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "ToggleNotifications",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user_id",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.RegisterEventResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/users/participate": {
            "post": {
                "description": "Register an event based on user_id and event_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Register an event",
                "parameters": [
                    {
                        "description": "Create User Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structure.RegisterEventRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.RegisterEventResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/users/send_otp_email": {
            "put": {
                "description": "Sends an OTP email to the specified recipients.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Send OTP Email",
                "parameters": [
                    {
                        "description": "Send OTP Email Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structure.SendOTPEmailRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP email successfully sent",
                        "schema": {
                            "$ref": "#/definitions/structure.SendOTPEmailResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - error in sending the OTP email",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/users/update_user_role": {
            "put": {
                "description": "Updates the role of a user based on the provided request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Update User Role",
                "parameters": [
                    {
                        "description": "Update User Role Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structure.UpdateUserRoleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User successfully updated",
                        "schema": {
                            "$ref": "#/definitions/structure.UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - error in updating user role",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/users/verify_otp": {
            "put": {
                "description": "Verifies the OTP entered by the user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Verify OTP",
                "parameters": [
                    {
                        "description": "Verify OTP Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structure.VerifyOTPRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OTP successfully verified",
                        "schema": {
                            "$ref": "#/definitions/structure.VerifyOTPResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - error in verifying the OTP",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/users/{event_id}": {
            "delete": {
                "description": "Cancel Register an event based on user_id and event_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Cancel Register an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user_id",
                        "name": "user_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "event_id",
                        "name": "event_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.RegisterEventResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/users/{user_id}": {
            "get": {
                "description": "Get User from given field (user_id)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "GetUserByUserId",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "put": {
                "description": "Update User information with the desired input",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "UpdateUserInformation",
                "parameters": [
                    {
                        "description": "Create Event Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/structure.UpdateUserInformationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/users/{user_id}/searchevent": {
            "post": {
                "description": "Search the Event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "SearchEvent",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user_id",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "search",
                        "name": "search",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.SearchEventResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/users/{user_id}/searchhistory": {
            "get": {
                "description": "Get Search History for the User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "GetSearchHistories",
                "parameters": [
                    {
                        "type": "string",
                        "description": "user_id",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/structure.GetSearchHistoriesResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/validate-token": {
            "get": {
                "description": "Validates a user's authentication token and returns the associated user details if valid.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Validate user token",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authentication Token",
                        "name": "token",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns user details on successful token validation.",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Returns an error if the token is invalid or expired.",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Problem": {
            "type": "object",
            "required": [
                "problem_id",
                "user_id"
            ],
            "properties": {
                "admin_username": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "problem": {
                    "type": "string"
                },
                "problem_id": {
                    "type": "string"
                },
                "reply": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "banner_image": {
                    "type": "string"
                },
                "birth_date": {
                    "type": "string"
                },
                "created_at": {
                    "type": "string"
                },
                "district": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "is_enable_notification": {
                    "type": "boolean"
                },
                "is_verified": {
                    "type": "boolean"
                },
                "last_name": {
                    "type": "string"
                },
                "payment_gateway_customer_id": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "province": {
                    "type": "string"
                },
                "register_type": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "user_image": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "structure.Announcement": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "header": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "structure.CreateEventRequest": {
            "type": "object",
            "required": [
                "activities",
                "city",
                "description",
                "district",
                "end_date",
                "event_image",
                "event_name",
                "location_name",
                "organizer_id",
                "participant_fee",
                "start_date",
                "status"
            ],
            "properties": {
                "activities": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "district": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "event_image": {
                    "type": "string"
                },
                "event_name": {
                    "type": "string"
                },
                "location_name": {
                    "type": "string"
                },
                "organizer_id": {
                    "type": "string"
                },
                "participant_fee": {
                    "type": "number"
                },
                "start_date": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "structure.CreateEventResponse": {
            "type": "object",
            "properties": {
                "event_id": {
                    "type": "string"
                }
            }
        },
        "structure.CreateProblemRequest": {
            "type": "object",
            "required": [
                "description",
                "problem",
                "user_id"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "problem": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "structure.CreateProblemResponse": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "problem": {
                    "type": "string"
                },
                "problem_id": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "structure.CreateQRPromptPayRequest": {
            "type": "object",
            "required": [
                "transaction_amount",
                "user_id"
            ],
            "properties": {
                "transaction_amount": {
                    "type": "number"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "structure.CreateUserRequest": {
            "type": "object",
            "required": [
                "address",
                "district",
                "first_name",
                "last_name",
                "password",
                "province",
                "role",
                "username"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "district": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "province": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "structure.CreateUserResponse": {
            "type": "object",
            "required": [
                "user_id"
            ],
            "properties": {
                "organizer_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "structure.GetAllUsersResponse": {
            "type": "object",
            "properties": {
                "users": {
                    "description": "FIXME should not use struct from models",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.User"
                    }
                }
            }
        },
        "structure.GetEventDataByIdResponse": {
            "type": "object",
            "properties": {
                "activities": {
                    "type": "string"
                },
                "admin_id": {
                    "type": "string"
                },
                "announcement_list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/structure.Announcement"
                    }
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "deadline": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "district": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "event_id": {
                    "type": "string"
                },
                "event_image": {
                    "type": "string"
                },
                "event_name": {
                    "type": "string"
                },
                "location_id": {
                    "type": "string"
                },
                "location_name": {
                    "type": "string"
                },
                "organizer_id": {
                    "type": "string"
                },
                "participant_count": {
                    "type": "integer"
                },
                "participant_fee": {
                    "type": "number"
                },
                "start_date": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "structure.GetEventList": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "district": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "event_id": {
                    "type": "string"
                },
                "event_image": {
                    "type": "string"
                },
                "event_name": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "structure.GetEventListsResponse": {
            "type": "object",
            "properties": {
                "event_lists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/structure.GetEventList"
                    }
                },
                "total_events": {
                    "type": "integer"
                },
                "total_pages": {
                    "type": "integer"
                }
            }
        },
        "structure.GetLocationByIdResponse": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "district": {
                    "type": "string"
                },
                "location_name": {
                    "type": "string"
                }
            }
        },
        "structure.GetParticipantListsResponse": {
            "type": "object",
            "properties": {
                "participant_list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/structure.Participant"
                    }
                }
            }
        },
        "structure.GetParticipatedEventListsResponse": {
            "type": "object",
            "properties": {
                "event_list": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/structure.ParticipatedEvent"
                    }
                }
            }
        },
        "structure.GetPaymentIntentByIdResponse": {
            "type": "object",
            "properties": {
                "currency": {
                    "type": "string"
                },
                "paymentClientSecret": {
                    "type": "string"
                },
                "paymentIntentId": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "transactionAmount": {
                    "type": "number"
                }
            }
        },
        "structure.GetProblemListsResponse": {
            "type": "object",
            "properties": {
                "problem_lists": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/structure.ProblemList"
                    }
                }
            }
        },
        "structure.GetSearchHistoriesResponse": {
            "type": "object",
            "properties": {
                "search_history": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/structure.SearchHistory"
                    }
                }
            }
        },
        "structure.IsRegisteredResponse": {
            "type": "object",
            "required": [
                "is_registered"
            ],
            "properties": {
                "is_registered": {
                    "type": "boolean"
                }
            }
        },
        "structure.LoginUserEmailRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "structure.LoginUserPhoneRequest": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "structure.LoginUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                }
            }
        },
        "structure.LoginUserResponse": {
            "type": "object",
            "required": [
                "first_name"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "organizer_id": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "role": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "structure.Participant": {
            "type": "object",
            "required": [
                "address",
                "birth_date",
                "district",
                "first_name",
                "last_name",
                "num_participant",
                "province",
                "username"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "birth_date": {
                    "type": "string"
                },
                "district": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "num_participant": {
                    "type": "integer"
                },
                "phone_number": {
                    "type": "string"
                },
                "province": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "user_image": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "structure.ParticipatedEvent": {
            "type": "object",
            "required": [
                "description",
                "end_date",
                "event_name",
                "location_name",
                "start_date"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "event_id": {
                    "type": "string"
                },
                "event_image": {
                    "type": "string"
                },
                "event_name": {
                    "type": "string"
                },
                "location_name": {
                    "type": "string"
                },
                "start_date": {
                    "type": "string"
                }
            }
        },
        "structure.ProblemList": {
            "type": "object",
            "properties": {
                "admin_username": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "problem": {
                    "type": "string"
                },
                "problem_id": {
                    "type": "string"
                },
                "reply": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "structure.ProblemResponse": {
            "type": "object",
            "properties": {
                "response": {
                    "type": "string"
                }
            }
        },
        "structure.RegisterEventRequest": {
            "type": "object",
            "required": [
                "amount",
                "event_id",
                "num_participant",
                "user_id"
            ],
            "properties": {
                "amount": {
                    "type": "integer"
                },
                "event_id": {
                    "type": "string"
                },
                "num_participant": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "structure.RegisterEventResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "structure.SearchEventResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "structure.SearchHistory": {
            "type": "object",
            "required": [
                "search_name",
                "user_id"
            ],
            "properties": {
                "search_name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "structure.SendAnnounceResponse": {
            "type": "object",
            "properties": {
                "announce_status": {
                    "type": "string"
                }
            }
        },
        "structure.SendAnnouncementRequest": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "event_id": {
                    "type": "string"
                },
                "event_name": {
                    "type": "string"
                },
                "subject": {
                    "type": "string"
                }
            }
        },
        "structure.SendCancelledEmailRequest": {
            "type": "object",
            "properties": {
                "event_date": {
                    "type": "string"
                },
                "event_id": {
                    "type": "string"
                },
                "event_name": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "structure.SendOTPEmailRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "structure.SendOTPEmailResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "structure.SendRegisteredEmailRequest": {
            "type": "object",
            "properties": {
                "event_id": {
                    "type": "string"
                },
                "event_name": {
                    "type": "string"
                },
                "organizer_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "structure.SendRegisteredEmailResponse": {
            "type": "object",
            "properties": {
                "announce_status": {
                    "type": "string"
                }
            }
        },
        "structure.SendReminderEmailRequest": {
            "type": "object",
            "properties": {
                "event_date": {
                    "type": "string"
                },
                "event_id": {
                    "type": "string"
                },
                "event_location": {
                    "type": "string"
                },
                "event_name": {
                    "type": "string"
                },
                "organizer_id": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "structure.SendReminderEmailResponse": {
            "type": "object",
            "properties": {
                "announce_status": {
                    "type": "string"
                }
            }
        },
        "structure.TestResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "structure.TransactionResponse": {
            "type": "object",
            "properties": {
                "response": {
                    "type": "string"
                }
            }
        },
        "structure.UpdateEventRequest": {
            "type": "object",
            "required": [
                "activities",
                "city",
                "description",
                "district",
                "end_date",
                "event_name",
                "location_name",
                "participant_fee",
                "start_date",
                "status"
            ],
            "properties": {
                "activities": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "district": {
                    "type": "string"
                },
                "end_date": {
                    "type": "string"
                },
                "event_id": {
                    "type": "string"
                },
                "event_image": {
                    "type": "string"
                },
                "event_name": {
                    "type": "string"
                },
                "location_name": {
                    "type": "string"
                },
                "participant_fee": {
                    "type": "number"
                },
                "start_date": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "structure.UpdateEventResponse": {
            "type": "object",
            "properties": {
                "event_id": {
                    "type": "string"
                }
            }
        },
        "structure.UpdateProblemRequest": {
            "type": "object",
            "required": [
                "problem_id"
            ],
            "properties": {
                "admin_username": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "problem": {
                    "type": "string"
                },
                "problem_id": {
                    "type": "string"
                },
                "reply": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "structure.UpdateUserInformationRequest": {
            "type": "object",
            "required": [
                "address",
                "birth_date",
                "district",
                "first_name",
                "last_name",
                "province",
                "user_id"
            ],
            "properties": {
                "address": {
                    "type": "string"
                },
                "birth_date": {
                    "type": "string"
                },
                "district": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "province": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                },
                "user_image": {
                    "type": "string"
                }
            }
        },
        "structure.UpdateUserRoleRequest": {
            "type": "object",
            "properties": {
                "role": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "structure.UserResponse": {
            "type": "object",
            "properties": {
                "response": {
                    "type": "string"
                }
            }
        },
        "structure.VerifyEventResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "structure.VerifyOTPRequest": {
            "type": "object",
            "properties": {
                "otp": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "structure.VerifyOTPResponse": {
            "type": "object",
            "properties": {
                "verified": {
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}